// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: index.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_index_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_index_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "matrix.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_index_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_index_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_index_2eproto;
class protoIndex;
struct protoIndexDefaultTypeInternal;
extern protoIndexDefaultTypeInternal _protoIndex_default_instance_;
class protoIndexEntry;
struct protoIndexEntryDefaultTypeInternal;
extern protoIndexEntryDefaultTypeInternal _protoIndexEntry_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::protoIndex* Arena::CreateMaybeMessage<::protoIndex>(Arena*);
template<> ::protoIndexEntry* Arena::CreateMaybeMessage<::protoIndexEntry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class protoIndexEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoIndexEntry) */ {
 public:
  inline protoIndexEntry() : protoIndexEntry(nullptr) {}
  ~protoIndexEntry() override;
  explicit PROTOBUF_CONSTEXPR protoIndexEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  protoIndexEntry(const protoIndexEntry& from);
  protoIndexEntry(protoIndexEntry&& from) noexcept
    : protoIndexEntry() {
    *this = ::std::move(from);
  }

  inline protoIndexEntry& operator=(const protoIndexEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline protoIndexEntry& operator=(protoIndexEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const protoIndexEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const protoIndexEntry* internal_default_instance() {
    return reinterpret_cast<const protoIndexEntry*>(
               &_protoIndexEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(protoIndexEntry& a, protoIndexEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(protoIndexEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(protoIndexEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  protoIndexEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<protoIndexEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const protoIndexEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const protoIndexEntry& from) {
    protoIndexEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(protoIndexEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoIndexEntry";
  }
  protected:
  explicit protoIndexEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .protoMatrix value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::protoMatrix& value() const;
  PROTOBUF_NODISCARD ::protoMatrix* release_value();
  ::protoMatrix* mutable_value();
  void set_allocated_value(::protoMatrix* value);
  private:
  const ::protoMatrix& _internal_value() const;
  ::protoMatrix* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::protoMatrix* value);
  ::protoMatrix* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:protoIndexEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
    ::protoMatrix* value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_2eproto;
};
// -------------------------------------------------------------------

class protoIndex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoIndex) */ {
 public:
  inline protoIndex() : protoIndex(nullptr) {}
  ~protoIndex() override;
  explicit PROTOBUF_CONSTEXPR protoIndex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  protoIndex(const protoIndex& from);
  protoIndex(protoIndex&& from) noexcept
    : protoIndex() {
    *this = ::std::move(from);
  }

  inline protoIndex& operator=(const protoIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline protoIndex& operator=(protoIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const protoIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const protoIndex* internal_default_instance() {
    return reinterpret_cast<const protoIndex*>(
               &_protoIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(protoIndex& a, protoIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(protoIndex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(protoIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  protoIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<protoIndex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const protoIndex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const protoIndex& from) {
    protoIndex::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(protoIndex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoIndex";
  }
  protected:
  explicit protoIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
  };
  // repeated .protoIndexEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::protoIndexEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoIndexEntry >*
      mutable_entries();
  private:
  const ::protoIndexEntry& _internal_entries(int index) const;
  ::protoIndexEntry* _internal_add_entries();
  public:
  const ::protoIndexEntry& entries(int index) const;
  ::protoIndexEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoIndexEntry >&
      entries() const;

  // @@protoc_insertion_point(class_scope:protoIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoIndexEntry > entries_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_index_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// protoIndexEntry

// string key = 1;
inline void protoIndexEntry::clear_key() {
  _impl_.key_.ClearToEmpty();
}
inline const std::string& protoIndexEntry::key() const {
  // @@protoc_insertion_point(field_get:protoIndexEntry.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void protoIndexEntry::set_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoIndexEntry.key)
}
inline std::string* protoIndexEntry::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:protoIndexEntry.key)
  return _s;
}
inline const std::string& protoIndexEntry::_internal_key() const {
  return _impl_.key_.Get();
}
inline void protoIndexEntry::_internal_set_key(const std::string& value) {
  
  _impl_.key_.Set(value, GetArenaForAllocation());
}
inline std::string* protoIndexEntry::_internal_mutable_key() {
  
  return _impl_.key_.Mutable(GetArenaForAllocation());
}
inline std::string* protoIndexEntry::release_key() {
  // @@protoc_insertion_point(field_release:protoIndexEntry.key)
  return _impl_.key_.Release();
}
inline void protoIndexEntry::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  _impl_.key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.key_.IsDefault()) {
    _impl_.key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protoIndexEntry.key)
}

// .protoMatrix value = 2;
inline bool protoIndexEntry::_internal_has_value() const {
  return this != internal_default_instance() && _impl_.value_ != nullptr;
}
inline bool protoIndexEntry::has_value() const {
  return _internal_has_value();
}
inline const ::protoMatrix& protoIndexEntry::_internal_value() const {
  const ::protoMatrix* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::protoMatrix&>(
      ::_protoMatrix_default_instance_);
}
inline const ::protoMatrix& protoIndexEntry::value() const {
  // @@protoc_insertion_point(field_get:protoIndexEntry.value)
  return _internal_value();
}
inline void protoIndexEntry::unsafe_arena_set_allocated_value(
    ::protoMatrix* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protoIndexEntry.value)
}
inline ::protoMatrix* protoIndexEntry::release_value() {
  
  ::protoMatrix* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protoMatrix* protoIndexEntry::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:protoIndexEntry.value)
  
  ::protoMatrix* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::protoMatrix* protoIndexEntry::_internal_mutable_value() {
  
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::protoMatrix>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::protoMatrix* protoIndexEntry::mutable_value() {
  ::protoMatrix* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:protoIndexEntry.value)
  return _msg;
}
inline void protoIndexEntry::set_allocated_value(::protoMatrix* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:protoIndexEntry.value)
}

// -------------------------------------------------------------------

// protoIndex

// repeated .protoIndexEntry entries = 1;
inline int protoIndex::_internal_entries_size() const {
  return _impl_.entries_.size();
}
inline int protoIndex::entries_size() const {
  return _internal_entries_size();
}
inline void protoIndex::clear_entries() {
  _impl_.entries_.Clear();
}
inline ::protoIndexEntry* protoIndex::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:protoIndex.entries)
  return _impl_.entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoIndexEntry >*
protoIndex::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:protoIndex.entries)
  return &_impl_.entries_;
}
inline const ::protoIndexEntry& protoIndex::_internal_entries(int index) const {
  return _impl_.entries_.Get(index);
}
inline const ::protoIndexEntry& protoIndex::entries(int index) const {
  // @@protoc_insertion_point(field_get:protoIndex.entries)
  return _internal_entries(index);
}
inline ::protoIndexEntry* protoIndex::_internal_add_entries() {
  return _impl_.entries_.Add();
}
inline ::protoIndexEntry* protoIndex::add_entries() {
  ::protoIndexEntry* _add = _internal_add_entries();
  // @@protoc_insertion_point(field_add:protoIndex.entries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoIndexEntry >&
protoIndex::entries() const {
  // @@protoc_insertion_point(field_list:protoIndex.entries)
  return _impl_.entries_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_index_2eproto
